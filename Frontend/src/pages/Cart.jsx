import React, { useContext, useState, useEffect } from 'react';
import { StoreContext } from '../context/StoreContext';
import { useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2';
import axios from 'axios';
import { getSubtotal, getDiscountAmount, calculateShippingFee, getTotal } from '../components/MapUtil';

const Cart = () => {
    const {
        cartItem,
        removeFromCart,
        updateQuantity,
        clearCart: contextClearCart,
        saveOrderInfo,
        orderInfo, // Th√™m orderInfo ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë√£ l∆∞u
    } = useContext(StoreContext);
    const navigate = useNavigate();

    // --- State ---
    const [coupon, setCoupon] = useState('');
    const [discount, setDiscount] = useState(0);
    const [shippingMethod, setShippingMethod] = useState('delivery');
    const { note, setNote } = useContext(StoreContext);
    const [paymentMethod, setPaymentMethod] = useState('cash');
    const [showClearCartConfirm, setShowClearCartConfirm] = useState(false);

    // Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ orderInfo khi component load
    useEffect(() => {
        if (orderInfo) {
            setNote(orderInfo.note || '');
            setShippingMethod(orderInfo.shippingMethod || 'delivery');
            setPaymentMethod(orderInfo.paymentMethod || 'cash');
            setCoupon(orderInfo.coupon || '');
            setDiscount(orderInfo.discountRate || 0);
        }
    }, [orderInfo]);

    // --- X·ª≠ l√Ω thay ƒë·ªïi ghi ch√∫ v·ªõi debounce ---
    const [noteTimeout, setNoteTimeout] = useState(null);

    const handleNoteChange = (e) => {
        const newNote = e.target.value;
        setNote(newNote);

        // Clear timeout c≈©
        if (noteTimeout) {
            clearTimeout(noteTimeout);
        }

        // Set timeout m·ªõi ƒë·ªÉ auto-save sau 1 gi√¢y
        const timeout = setTimeout(() => {
            saveOrderInfo({
                shippingMethod,
                note: newNote,
                paymentMethod,
                coupon: coupon,
                discountRate: discount,
            });
        }, 1000);

        setNoteTimeout(timeout);
    };

    // Cleanup timeout khi component unmount
    useEffect(() => {
        return () => {
            if (noteTimeout) {
                clearTimeout(noteTimeout);
            }
        };
    }, [noteTimeout]);

    // --- X·ª≠ l√Ω s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ---
    const handleQuantityChange = (itemId, newQty) => {
        const qty = parseInt(newQty);
        if (!isNaN(qty) && qty >= 0) {
            updateQuantity(itemId, qty);
        }
    };

    const handleClearCart = () => {
        contextClearCart();
        setShowClearCartConfirm(false);
    };

    const getSubtotal = () => {
        return Object.values(cartItem).reduce((total, item) => total + item.price * item.quantity, 0);
    };

    // --- √Åp d·ª•ng m√£ gi·∫£m gi√° ---
    const handleApplyCoupon = async () => {
        const token = localStorage.getItem('token');

        if (!token) {
            Swal.fire('L·ªói', 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng m√£ gi·∫£m gi√°', 'warning');
            return;
        }

        try {
            console.log('üé´ G·ª≠i m√£:', coupon);
            const res = await axios.post(
                'http://localhost:9000/api/promotion-discounts/validate',
                { code: coupon.trim() },
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                },
            );

            const discountPercent = res.data.discount;
            console.log('‚úÖ Nh·∫≠n discount:', discountPercent);
            setDiscount(discountPercent / 100);

            Swal.fire('Th√†nh c√¥ng', `√Åp d·ª•ng m√£ ${coupon.toUpperCase()} (-${discountPercent}%)`, 'success');
        } catch (err) {
            console.error('‚ùå L·ªói ki·ªÉm tra m√£:', err);
            const msg = err.response?.data?.message || 'Kh√¥ng th·ªÉ ki·ªÉm tra m√£ gi·∫£m gi√°';
            Swal.fire('Kh√¥ng h·ª£p l·ªá', msg, 'error');
            setDiscount(0);
        }
    };

    // --- Thanh to√°n / Ti·∫øp t·ª•c ƒë·∫øn trang ƒë·∫∑t h√†ng ---
    const handleCheckout = () => {
        // Validate ghi ch√∫ (n·∫øu c·∫ßn)
        if (note.length > 500) {
            Swal.fire('L·ªói', 'Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±', 'warning');
            return;
        }

        // Clear timeout ƒë·ªÉ ƒë·∫£m b·∫£o ghi ch√∫ ƒë∆∞·ª£c l∆∞u ngay l·∫≠p t·ª©c
        if (noteTimeout) {
            clearTimeout(noteTimeout);
        }

        // L∆∞u th√¥ng tin ƒë∆°n h√†ng
        saveOrderInfo({
            shippingMethod,
            note: note.trim(), // Trim whitespace
            paymentMethod,
            coupon: coupon,
            discountRate: discount,
        });

        console.log('üìù Ghi ch√∫ ƒë∆∞·ª£c l∆∞u:', note.trim());
        navigate('/order');
    };

    // --- X√°c nh·∫≠n x√≥a gi·ªè h√†ng ---
    const handleConfirmClearCart = () => {
        Swal.fire({
            title: 'X√≥a gi·ªè h√†ng?',
            text: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô s·∫£n ph·∫©m trong gi·ªè kh√¥ng?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'X√≥a t·∫•t c·∫£',
            cancelButtonText: 'H·ªßy',
            width: 300,
        }).then((result) => {
            if (result.isConfirmed) {
                contextClearCart();
                // Reset ghi ch√∫ khi x√≥a gi·ªè h√†ng
                setNote('');
                Swal.fire({
                    title: 'ƒê√£ x√≥a!',
                    text: 'Gi·ªè h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a.',
                    icon: 'success',
                    width: 300,
                    showConfirmButton: false,
                    timer: 1500,
                });
            }
        });
    };

    // --- T√≠nh to√°n gi√° ---
    const subtotal = getSubtotal(cartItem);
    const discountAmount = getDiscountAmount(subtotal, discount);
    const total = subtotal - discountAmount;

    return (
        <div className="p-6 pt-28 max-w-4xl mx-auto">
            <h2 className="text-xl font-semibold mb-4 text-primary">Gi·ªè h√†ng c·ªßa b·∫°n</h2>

            {subtotal === 0 ? (
                <p className="text-gray-500">Gi·ªè h√†ng ƒëang tr·ªëng.</p>
            ) : (
                <>
                    {/* Header cho desktop */}
                    <div className="hidden md:grid grid-cols-6 font-bold border-b py-2 text-gray-700 text-sm">
                        <p>S·∫£n ph·∫©m</p>
                        <p>T√™n</p>
                        <p>Gi√°</p>
                        <p>S·ªë l∆∞·ª£ng</p>
                        <p>T·ªïng</p>
                        <p>X√≥a</p>
                    </div>

                    {/* Danh s√°ch s·∫£n ph·∫©m */}
                    {Object.entries(cartItem).map(([itemId, itemData]) => {
                        if ((itemData.quantity || 0) <= 0) return null;

                        return (
                            <div key={itemId} className="grid md:grid-cols-6 grid-cols-1 border-b py-4 text-sm gap-2">
                                {/* S·∫£n ph·∫©m */}
                                <div className="flex items-center gap-2">
                                    <span className="font-medium md:hidden w-24">S·∫£n ph·∫©m:</span>
                                    <img
                                        src={itemData.image}
                                        alt={itemData.name}
                                        className="w-16 h-16 object-cover rounded"
                                    />
                                </div>

                                {/* T√™n */}
                                <div className="flex items-center md:block">
                                    <span className="font-medium md:hidden w-24">T√™n:</span>
                                    <p>{itemData.name}</p>
                                    {itemData.selectedOptions &&
                                        Object.entries(itemData.selectedOptions).map(([optionName, choices]) => (
                                            <div key={optionName} className="text-gray-500 text-xs">
                                                {optionName}:{' '}
                                                {choices
                                                    .map((c) => `${c.label} (+${c.price.toLocaleString()}‚Ç´)`)
                                                    .join(', ')}
                                            </div>
                                        ))}
                                </div>

                                {/* Gi√° */}
                                <div className="flex items-center md:block">
                                    <span className="font-medium md:hidden w-24">Gi√°:</span>
                                    <p>
                                        {itemData.price?.toLocaleString('vi-VN', {
                                            style: 'currency',
                                            currency: 'VND',
                                        }) || '0 ‚Ç´'}
                                    </p>
                                </div>

                                {/* S·ªë l∆∞·ª£ng */}
                                <div className="flex items-center md:block">
                                    <span className="font-medium md:hidden w-24">S·ªë l∆∞·ª£ng:</span>
                                    <div className="flex items-center gap-2">
                                        <button
                                            onClick={() => handleQuantityChange(itemId, itemData.quantity - 1)}
                                            disabled={itemData.quantity <= 0}
                                            className="rounded px-2 py-1 border hover:bg-gray-100"
                                        >
                                            -
                                        </button>
                                        <span className="w-8 text-center">{itemData.quantity}</span>
                                        <button
                                            onClick={() => handleQuantityChange(itemId, itemData.quantity + 1)}
                                            className="rounded px-2 py-1 border hover:bg-gray-100"
                                        >
                                            +
                                        </button>
                                    </div>
                                </div>

                                {/* T·ªïng */}
                                <div className="flex items-center md:block">
                                    <span className="font-medium md:hidden w-24">T·ªïng:</span>
                                    <p>
                                        {(itemData.price * itemData.quantity).toLocaleString('vi-VN', {
                                            style: 'currency',
                                            currency: 'VND',
                                        })}
                                    </p>
                                </div>

                                {/* X√≥a */}
                                <div className="flex items-center md:block">
                                    <span className="font-medium md:hidden w-24">X√≥a:</span>
                                    <button
                                        onClick={() => removeFromCart(itemId)}
                                        className="text-red-500 hover:underline hover:text-red-700"
                                    >
                                        X√≥a
                                    </button>
                                </div>
                            </div>
                        );
                    })}

                    <div className="mt-4 text-right">
                        <button onClick={handleConfirmClearCart} className="text-red-600 hover:underline text-sm">
                            X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m
                        </button>
                    </div>

                    {/* M√£ khuy·∫øn m√£i */}
                    <div className="mb-4">
                        <input
                            type="text"
                            value={coupon}
                            onChange={(e) => setCoupon(e.target.value)}
                            placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                            className="border px-3 py-2 rounded mr-2 focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                        <button
                            onClick={handleApplyCoupon}
                            className="bg-primary text-white px-4 py-2 rounded hover:opacity-90"
                            disabled={!coupon.trim()}
                        >
                            √Åp d·ª•ng m√£
                        </button>
                    </div>

                    {/* Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn v√† t·ªïng ti·ªÅn */}
                    <div className="mt-6 flex flex-col md:flex-row md:items-center justify-between gap-6 md:gap-10">
                        {/* Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn */}
                        <div className="space-y-2 w-full md:w-1/2">
                            <p className="font-semibold">Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn:</p>
                            <label className="flex items-center gap-2 cursor-pointer">
                                <input
                                    type="radio"
                                    name="shipping"
                                    value="pickup"
                                    checked={shippingMethod === 'pickup'}
                                    onChange={() => setShippingMethod('pickup')}
                                />
                                <span>L·∫•y t·∫°i c·ª≠a h√†ng (mi·ªÖn ph√≠)</span>
                            </label>
                            <label className="flex items-center gap-2 cursor-pointer">
                                <input
                                    type="radio"
                                    name="shipping"
                                    value="delivery"
                                    checked={shippingMethod === 'delivery'}
                                    onChange={() => setShippingMethod('delivery')}
                                />
                                <span>Giao h√†ng t·∫≠n n∆°i</span>
                            </label>
                        </div>

                        {/* T·ªïng ti·ªÅn */}
                        <div className="border-t pt-4 text-right w-full md:w-1/2 space-y-2 text-sm md:text-base">
                            <p>
                                T·ªïng s·∫£n ph·∫©m:{' '}
                                <span className="font-semibold">
                                    {subtotal.toLocaleString('vi-VN', {
                                        style: 'currency',
                                        currency: 'VND',
                                    })}
                                </span>
                            </p>
                            {discount > 0 && (
                                <p>
                                    Gi·∫£m gi√°:{' '}
                                    <span className="text-green-600 font-semibold">
                                        -{' '}
                                        {discountAmount.toLocaleString('vi-VN', {
                                            style: 'currency',
                                            currency: 'VND',
                                        })}
                                    </span>
                                </p>
                            )}
                            <p className="text-lg font-bold">
                                T·ªïng thanh to√°n:{' '}
                                <span className="text-red-600">
                                    {total.toLocaleString('vi-VN', {
                                        style: 'currency',
                                        currency: 'VND',
                                    })}
                                </span>
                            </p>
                            <div className="text-right mt-6">
                                <button
                                    onClick={handleCheckout}
                                    className="bg-primary text-white px-6 py-3 rounded text-sm md:text-base hover:opacity-90 disabled:opacity-50"
                                    disabled={subtotal === 0}
                                >
                                    Ti·∫øn h√†nh ƒë·∫∑t h√†ng
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* Ghi ch√∫ ƒë∆°n h√†ng - C·∫¢I TI·∫æN */}
                    <div className="pt-5 border-t mt-5">
                        <div className="mb-2">
                            <p className="font-semibold">Ghi ch√∫ ƒë∆°n h√†ng:</p>
                            <span className={`text-sm ${note.length > 450 ? 'text-red-500' : 'text-gray-500'}`}>
                                {note.length}/500 k√Ω t·ª±
                            </span>
                        </div>
                        <textarea
                            className="w-full md:w-2/3 border p-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent resize-none"
                            rows={4}
                            placeholder="V√≠ d·ª•: Giao sau 18h, kh√¥ng l·∫•y n∆∞·ªõc ƒë√°, g·ªçi tr∆∞·ªõc khi giao..."
                            value={note}
                            onChange={handleNoteChange}
                            maxLength={500}
                        />
                        <div className="mt-2 text-xs text-gray-500">üí° Ghi ch√∫ s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông sau 1 gi√¢y</div>
                    </div>
                </>
            )}
        </div>
    );
};

export default Cart;
